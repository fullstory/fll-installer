#!/bin/bash
# Convert a live CD iso so that it's bootable from a partition
# Copyright 2007  Red Hat, Inc.
# Jeremy Katz <katzj@redhat.com>
#
# overlay/persistence enhancements by Douglas McClendon <dmc@viros.org>
# forked sidux version by Niall Walsh <niallwalsh@users.berlios.de>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# NOTE
# extra args are appended to kernel cmdlines
# There's no md5sum checking anywhere (noverify hardcoded on)
# It is hardcoded to use "sidux" as the path
# It cuts filenames down to "vmlinuz", "initrd.img"
# ext* is untested
# syslinux.cfg is very primitive ... syslinux does have a "simple" menu though
# block device as iso support newly added (untested)
# mtools and syslinux MUST BOTH be installed

# TODO if we want it, we need a checkisomd5 function :-/
noverify=1
# TODO Should be from default/distro or similar?
LiveOS="sidux"

export PATH=/sbin:/usr/sbin:$PATH

usage() {
    echo "$0 [--overlay-size-mb [<size>]] [--noboot] [--reset-mbr] [--debug] [--noverify] <iso path> <target device> -- [kernel_args]"
    echo "creates a bootable fromiso install, with optional persist, on an existing ext2/3 or fat partition"
    exit 1
}

cleanup() {
    [ -d "$CDMNT" ] && umount $CDMNT && rmdir $CDMNT
    [ -d "$USBMNT" ] && umount $USBMNT && rmdir $USBMNT
}

exitclean() {
    echo "Cleaning up to exit..."
    cleanup
    exit 1
}

getdisk() {
    DEV=$1

    p=$(udevinfo -q path -n $DEV)
    if [ -e /sys/$p/device ]; then
	device=$(basename /sys/$p)
    else
	device=$(basename $(readlink -f /sys/$p/../))
    fi
    if [ ! -e /sys/block/$device -o ! -e /dev/$device ]; then
	echo "Error finding block device of $DEV.  Aborting!"
	exitclean
    fi

    device="/dev/$device"
}

resetMBR() {
    getdisk $1
    if [ -f /usr/lib/syslinux/mbr.bin ]; then
	cat /usr/lib/syslinux/mbr.bin > $device
    elif [ -f /usr/share/syslinux/mbr.bin ]; then
	cat /usr/share/syslinux/mbr.bin > $device
    else
	exitclean
    fi
}

checkMBR() {
    getdisk $1

    bs=$(mktemp /tmp/bs.XXXXXX)
    dd if=$device of=$bs bs=512 count=1 2>/dev/null || exit 2
    
    mbrword=$(hexdump -n 2 $bs |head -n 1|awk {'print $2;'})
    rm -f $bs
    if [ "$mbrword" = "0000" ]; then
	echo "MBR appears to be blank."
	echo "Do you want to replace the MBR on this device?"
	echo "Press Enter to continue or ctrl-c to abort"
	read
	resetMBR $1
    fi

    return 0
}

checkPartActive() {
    dev=$1
    getdisk $dev
    
    # if we're installing to whole-disk and not a partition, then we 
    # don't need to worry about being active
    if [ "$dev" = "$device" ]; then
	return
    fi

    if [ "$(/sbin/fdisk -l $device 2>/dev/null |grep $dev |awk {'print $2;'})" != "*" ]; then
	echo "Partition isn't marked bootable!"
	echo "You can mark the partition as bootable with "
	if [ "$(which parted)" ]; then
		echo "    # /sbin/parted $device"
		echo "    (parted) toggle N boot"
		echo "    (parted) quit"
	else
		echo "Assuming it is the first partition"
		echo "    # /sbin/fdisk $device"
		echo "    Command (m for help): a"
		echo "    Partition number (1-4): 1"
		echo "    Command (m for help): w"
	fi
	exitclean
    fi
}

checkFilesystem() {
    dev=$1

    USBFS=$(/lib/udev/vol_id -t $dev)
    if [ "$USBFS" != "vfat" -a "$USBFS" != "msdos" -a "$USBFS" != "ext2" -a "$USBFS" != "ext3" ]; then
	echo "USB filesystem must be vfat or ext[23]"
	exitclean
    fi

}

checkSyslinuxVersion() {
    if [ ! -x /usr/bin/syslinux ]; then
	echo "You need to have syslinux installed to run this script"
	exit 1
    fi
    if [ ! -x /usr/bin/mtools ]; then
	echo "You need to have mtools installed to run this script"
	exit 1
    fi
}

# TODO check why and if anything is possible?
if [ $(id -u) != 0 ]; then 
    echo "You need to be root to run this script"
    exit 1
fi

while [ $# -gt 2 -a -z "$endargsfound" ]; do
    case $1 in
	--overlay-size-mb)
	    if [ $2 -gt 0 ]; then
	        overlaysizemb=$2
	        shift
	    else
	        overlaysizemb="256"
	    fi
	    ;;
	--noverify)
	    noverify=1
	    ;;
	--reset-mbr|--resetmbr)
	    resetmbr=1
	    ;;
	--noboot)
	    noboot=1
	    ;;
	--debug)
	    debug=1
	    ;;
	*)
            if [ "$3" = "--" ]; then
                endargsfound=1
            else
                usage
            fi
	    ;;
    esac
    shift
done

ISO=$(readlink -f "$1")
USBDEV=$2
shift
shift

if [ -z "$ISO" ] || [ ! -b "$ISO" -a ! -f "$ISO" ]; then
    usage
fi

if [ -z "$USBDEV" -o ! -b "$USBDEV" ]; then
    usage
fi

if [ -z "$noverify" ]; then
    # verify the image
    echo "Verifying image..."
    checkisomd5 --verbose $ISO
    if [ $? -ne 0 ]; then
	echo "Are you SURE you want to continue?"
	echo "Press Enter to continue or ctrl-c to abort"
	read
    fi
fi

# do some basic sanity checks.  
checkFilesystem $USBDEV
if [ -z "$noboot" ]; then
    checkSyslinuxVersion 
    checkPartActive $USBDEV
    checkMBR $USBDEV
    [ -n $resetmbr ] && resetMBR $USBDEV
fi

if [ "$USBFS" = "vfat" -a  "$overlaysizemb" -gt 2047 ]; then
	echo "Can't have an overlay greater than 2048MB on VFAT"
	exitclean
fi

# FIXME: would be better if we had better mountpoints
CDMNT=$(mktemp -d /media/cdtmp.XXXXXX)
if [ -f $ISO ]; then
	mount -o loop,ro $ISO $CDMNT || exitclean
else
	mount -o ro $ISO $CDMNT || exitclean
fi
USBMNT=$(mktemp -d /media/usbdev.XXXXXX)
mount $USBDEV $USBMNT || exitclean

trap exitclean SIGINT SIGTERM

# let's try to make sure there's enough room on the partition
check=$ISO
if [ -d $USBMNT/$LiveOS ]; then
  tbd=$(du -s -B 1M $USBMNT/$LiveOS | awk {'print $1;'})
else
  tbd=0
fi
livesize=$(du -s -B 1M $check | awk {'print $1;'})
free=$(df  -B1M $USBDEV  |tail -n 1 |awk {'print $4;'})

if [ $(($overlaysizemb + $livesize)) -gt $(($free + $tbd)) ]; then
  echo "Unable to fit live image + overlay on available space on partition"
  echo "Size of live image: $livesize"
  echo "Overlay size: $overlaysizemb"
  echo "Available space: $(($free + $tbd))"
  exitclean
fi

if [ -d $USBMNT/$LiveOS ]; then
    echo "Already set up as live image.  Deleting old in fifteen seconds..."
    sleep 15

    rm -rf $USBMNT/$LiveOS
fi

echo "Copying live image to partition"
if [ ! -d $USBMNT/$LiveOS ]; then mkdir $USBMNT/$LiveOS ; fi
cp $CDMNT/boot/vmlinuz* $USBMNT/$LiveOS/vmlinuz || exitclean
cp $CDMNT/boot/initrd* $USBMNT/$LiveOS/initrd.img || exitclean
if [ -z "$debug" ]; then
    if [ -f $ISO ]; then
        cp $ISO $USBMNT/$LiveOS/${LiveOS}.iso || exitclean
    else
        dd if=$ISO of=$USBMNT/$LiveOS/${LiveOS}.iso || exitclean
    fi
fi
if [ "$overlaysizemb" -gt 1 ]; then
	PERSIST='persist'
	if [ "$USBFS" = "vfat" ]; then
		echo "Initializing persistent overlay file"
		dd if=/dev/zero of=$USBMNT/$LiveOS/${LiveOS}-rw count=$overlaysizemb bs=1M || exitclean
		echo 'y' | /sbin/mkfs.ext3 $USBMNT/$LiveOS/${LiveOS}-rw || exitclean
		PERSIST='persist='$LiveOS'/'$LiveOS'-rw'
	fi
fi

echo "Creating boot config file"
# TODO use syslinux menu
echo 'default '$LiveOS'
timeout 50
prompt 1
label '$LiveOS'
kernel '$LiveOS'/vmlinuz
append initrd='$LiveOS'/initrd.img boot=fll quiet vga=791 fromiso='$LiveOS'/'$LiveOS'.iso '$PERSIST' '$@'
label temp
kernel '$LiveOS'/vmlinuz
append initrd='$LiveOS'/initrd.img boot=fll quiet vga=791 fromiso='$LiveOS'/'$LiveOS'.iso '$@'
' > $USBMNT/extlinux.cfg || exitclean

if [ -z "$noboot" ]; then
    echo "Installing boot loader"
    if [ "$USBFS" = "vfat" -o "$USBFS" = "msdos" ]; then
        # syslinux expects the config to be named syslinux.cfg 
        # and has to run with the file system unmounted
        mv $USBMNT/extlinux.cfg $USBMNT/syslinux.cfg
        cleanup
        syslinux -d $LiveOS $USBDEV || exitclean
    elif [ "$USBFS" = "ext2" -o "$USBFS" = "ext3" ]; then
        # TODO does extlinux.cfg need to be in $USBMNT/$LiveOS ?
        # has to be run with the file system mounted
        extlinux -i $USBMNT/$LiveOS || exitclean
        cleanup
    fi
}

echo "Partition set up as live image!"
