#!/bin/sh
# fll-iso-strip
#
# Copyright 2008-2011 Niall Walsh (niallwalsh@users.berlios.de)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; if not, see <http://www.gnu.org/licenses>
#
# On Debian GNU/Linux systems, the text of the GPL license can be
# found in /usr/share/common-licenses/GPL.

iso=$1

usage () {
	echo "Usage: fll-iso-strip iso (amd64) (noi18n) (debug)
  iso should be a (dual arch) fll iso to strip
  Extracts the single desired arch (default 686)
  Strips i18n if noi18n given
  Strips sources if present
  Rewrites isolinux.cfg and md5sums
  Writes new iso alongside original iso with a modified name to reflect changes
All staging work done in current dir so size of target iso needed free"
	exit
}

if [ -z "${iso}" ]; then
	echo "No iso supplied"
	usage
fi

shift

if [ ! -f "${iso}" ]; then
	echo "Cannot read supplied iso ${iso}"
	exit
fi

if [ "$(id -u)" -ne 0 ]; then
	if ! which fuseiso >/dev/null; then
		echo "fuseiso is required to run $0 unless run by root"
		exit
	else
		isomount="fuseiso"
		isoumount="fusermount -u"
	fi
else
	isomount="mount -t iso9660 -o loop,ro"
	isoumount="umount"
fi

while [ -n "$1" ]; do
	if [ "$1" = "amd64" ]; then
		msg="${msg}amd64 Selected\n"
		arch="amd64"
	elif [ "$1" = "noi18n" ]; then
		msg="${msg}i18n will be removed\n"
		noi18n='-noi18n'
	elif [ "$1" = "debug" ]; then
		msg="${msg}enabling debugging\n"
		debug=1
	fi
	shift
done

debug() {
	if [ -n "${debug}" ]; then
		echo $@
	fi
}

stage=$(mktemp -d stage.XXXXXX)
fusemnt=$(mktemp -d fusemnt.XXXXXX)

debug "stripping $iso"
debug ${msg}
debug "arch: ${arch} noi18n: ${noi18n}"
debug "stage: ${stage} fusemnt: ${fusemnt}"

cancel_strip() {
	rmdir ${fusemnt}
	chmod -R u+w ${stage}
	rm -rf ${stage}
}

if ! ${isomount} ${iso} ${fusemnt}; then
	echo "Failed to mount ${iso}"
	cancel_strip
	exit
fi

rsyncopts="--exclude='sources'"
if [ -n "${noi18n}" ]; then
	rsyncopts=${rsyncopts}" --exclude='i18n'"
fi

if [ "${arch}" = 'amd64' ]; then
	rsyncopts="${rsyncopts} --exclude='"'*i386*'"' --exclude='"'*686*'"'";
	squashfs=$(find ${fusemnt} -name '*.amd64' | grep -v boot | sed 's|^'${fusemnt}'\/||')
	noarchmenu="686"
	noarchname="i386"
else
	rsyncopts="${rsyncopts} --exclude='"'*amd64*'"'";
	squashfs=$(find ${fusemnt} -name '*.686' | grep -v boot | sed 's|^'${fusemnt}'\/||')
	noarchmenu="amd64"
	noarchname="amd64"
fi

# get FLL_DISTRO_NAME and NEW_ISO
distro=$(echo $iso | sed 's|^.*/||;s|-.*||')
newiso=$(echo $iso | sed 's|-'${noarchname}'|'${noi18n}'|')

if [ -f ${newiso} ]; then
	echo "Would overwrite existing ${newiso}"
	${isoumount} ${fusemnt}
	cancel_strip
	exit
fi

debug "distro: ${distro}"
debug "newiso: ${newiso}"

debug "rsyncopts: ${rsyncopts}"

if ! echo rsync -a ${rsyncopts} ${fusemnt}/* ${stage} | sh ; then
	echo "failed to copy from ${fusemnt} to ${stage}"
	${isoumount} ${fusemnt}
	cancel_strip
	exit
fi

$isoumount ${fusemnt}
rmdir ${fusemnt}

debug "rsync done ${fusemnt} unmounted"

chmod -R u+w ${stage}

menupath="boot/isolinux/isolinux.cfg"
menu="${stage}/${menupath}"
perl -e '$noarch='${noarchmenu}';
while(<>)
{
	if ($stage==0)
	{
		if ((/^label/)&&(/$noarch/))
		{
			$stage=1;
			$_="";
		}
	}
	else
	{
		if ((/^label/)&&(!/$noarch/))
		{
			$stage=0;
		}
		else
		{
			$_="";
		}
	}
	print "$_";
}' ${menu} > ${menu}.new && mv ${menu}.new ${menu}
debug "menu updated"

perl -e '$stage="'${stage}'";
open(IN,$stage."/md5sums")||die "failed to open $stage/md5sums : $!";
while(<IN>)
{
	@f=split(/\s+/);
	$f[1]=~s/^*//;
	if (-f $stage."/".$f[1])
	{
		if ($f[1]!="'${menupath}'")
		{
			print;
		}
	}
}' > ${stage}/md5sums.new && mv ${stage}/md5sums.new ${stage}/md5sums

cd ${stage} && md5sum $menupath | awk '{print $1" *"$2}' >> md5sum
cd - >/dev/null 2>&1

debug "md5sums updated"

echo 'boot/grub/* 10000
boot/* 1000
'${squashfs}' 100' > ${stage}/isoimage.sort

uuid=$(LANG=C isoinfo -debug -d -i $iso | \
	awk '/^Creation\ Date\:/{gsub(/[\:\.]/,"");print $3$4$5$6$7}')

[ -e "${stage}/efi.img" ] && efi="--efi-boot efi.img"

xorriso	-as mkisofs \
	-graft-points \
	-v \
	-quiet \
	-pad \
	-l \
	-no-emul-boot \
	-boot-load-size 4 \
	-boot-info-table \
	-b boot/isolinux/isolinux.bin \
	-c boot/isolinux/isolinux.cat \
	--modification-date=$uuid \
	$efi \
	--protective-msdos-label \
	-V ${distro} \
	--sort-weight 0 / \
	--sort-weight 1 /boot \
	--sort-weight 2 /boot/grub \
	-o ${newiso} \
		${stage} > /dev/null && ok="Y"

[ -n "$ok" ] && debug "iso created"

rm -rf ${stage}

debug "${stage} removed"

[ -n "$ok" ] && isohybrid ${newiso} && debug "iso hybridised"

[ -n "$ok" ] && echo "Created ${newiso}"

