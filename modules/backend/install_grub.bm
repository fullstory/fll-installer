##
##-------------------------------------
# Needs:
# HD_CHOICE
# BOOT_WHERE (also changed here)
# TARGET_MNT_POINT
# FLL_DISTRO_NAME
# HD_FSTYPE 
# BOOT_RUNNING_KERNEL
# TMPDIR
# LANG
# HD_MAP
#
# Calls:
# logit
# get_root_device
# chroot_it
# translate_linux_to_grub
# get_boot_cmdline
# getbootparam
#
# update_status
# install_grub
#
##-------------------------------------
##
install_grub()
{
	local GRUB_KOPT
	local GRUB_DEFOPTIONS
	local GRUB_VGA
	local root_partition
	local root_device
	local device
	local usb_dev
	local point
	local bootfrom
	
	#
	# log my call
	#
	logit "installing grub"
	#

	root_partition=$(echo ${HD_CHOICE} |cut -d"'" -f2)

	root_device=$(get_root_device $root_partition)

	device=$(echo $root_device|cut -d / -f3)
	
	usb_dev=$(echo $(readlink -f /sys/block/${device}/device) | grep  "usb")

	# if the user chooses an USB device for the Grub installation we ignore
	# that ( at least till further investigation) and set it to "partition"
        case $BOOT_WHERE in
                mbr)
			 bootfrom="(hd0)"
                        ;;
                partition)
                        bootfrom="${root_partition}"
                        ;;
                /dev/[hsv]d[a-z]) 
			device="$(echo ${BOOT_WHERE}|cut -d / -f3)"
                        if [ -n "$(echo $(readlink -f /sys/block/${device}/device) | \
                                grep  "usb")" ]; then
                                bootfrom="${root_partition}"
                        else
                                bootfrom="${BOOT_WHERE}"
                        fi
                        ;;
		*) 
                                bootfrom="${root_partition}"
        esac

	if [ -n "${usb_dev}" ]; then
		# USB install must have first Grub on partition
		bootfrom=${HD_CHOICE}
	else
		# in case of jfs/xfs force installation to mbr
		# but only if HD is not on USB and it's not already MBR
		if [ "${BOOT_WHERE}" = "partition" ]; then
			case "$HD_FSTYPE" in
			jfs|xfs) bootfrom=${root_device};;
			esac
		fi
	fi

	# installing on MBR 
	if [ "$bootfrom" = "$(get_root_device ${bootfrom})" ]
	then
		# Make a backup of the old mbr
		dd if=${bootfrom} of=$TARGET_MNT_POINT/boot/${FLL_DISTRO_NAME}-old-mbr.$(date -I) \
			bs=446 count=1 >/dev/null
	fi

	#
	# install grub
	#
	if [ "${bootfrom}" = "$(get_root_device ${bootfrom})" ]
	then # install on MBR
		grub-install --recheck --no-floppy --force --root-directory=$TARGET_MNT_POINT "${bootfrom}" >&2
	else # install on partition
	     # is twice because sometimes the first one fails in that cases the second
	     # don't fail !!!
		grub-install --recheck --no-floppy --force --root-directory=$TARGET_MNT_POINT "${bootfrom}" >&2 || \
			grub-install --recheck --no-floppy --force --root-directory=$TARGET_MNT_POINT "${bootfrom}" >&2
	fi

	# 
	# Create initital grub configuration (grub2 ignores -y)
	#
	say "create initial grub configuration"

	if [ -e "${TARGET_MNT_POINT}/etc/default/grub" ]; then
		#TODO a proper configuration
		# propagate the default video mode 
		# extract vga mode from CMDLINE
		GRUB_DEFOPTIONS=""
		GRUB_VGA=$(getbootparam vga)
		[ -n "$GRUB_VGA" ] && GRUB_DEFOPTIONS="vga=$GRUB_VGA"
		GRUB_CRYPT=$(cryptsetup status ${root_device} 2>/dev/null | \
			     awk -F: '/^  device:/{print $2}')
		GRUB_CRYPT=${GRUB_CRYPT##* }
		if [ -n "$GRUB_CRYPT" ] ; then
			if [ -z "$GRUBDEFOPTIONS" ] ; then
				GRUB_DEFOPTIONS="cryptopts=source=${GRUB_CRYPT}"
			else
				GRUB_DEFOPTIONS="$GRUBDEFOPTIONS cryptopts=source=${GRUB_CRYPT}"
			fi
			echo "cryptroot 	${GRUB_CRYPT} 	none 	luks" >> /etc/crypttab
		fi
		sed -i -e "s#\(GRUB_CMDLINE_LINUX=\).*#\1\"${GRUB_DEFOPTIONS}\"#"  \
		    ${TARGET_MNT_POINT}/etc/default/grub
	fi

	# hook update-grub into the kernel installing chain
cat << EOF > "$TARGET_MNT_POINT/etc/kernel-img.conf"
# Kernel Image management overrides
# See kernel-img.conf(5) for details
do_symlinks = Yes
postinst_hook = /usr/sbin/update-grub
postrm_hook = /usr/sbin/update-grub
do_bootloader = no
do_initrd = Yes
relative_links = Yes
EOF
	
	# update the grub config with our changes
	chroot_it update-grub >&2

	return 0
}

