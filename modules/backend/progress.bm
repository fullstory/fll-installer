##
##-------------------------------------
# Needs:
#
# Calls:
#-----------------------------------
# Defines
# ROOT_MIN_CORR
##-------------------------------------
## Format definition for the message  for the install-gui message
## http://developer.gnome.org/doc/API/2.0/pango/PangoMarkupFormat.html"
##
##-------------------------------------
#

#
##
##-------------------------------------
# Needs
# INSTALLER_INOTIFY - to communicate with the gui
##-------------------------------------
# This must be enhanced when we want an
# ascii/curses frontend for the installer
##-------------------------------------
##
abort_progress()
{
	# printf for new install-gui choice "install with terminal output, debug modus"
	[ -z "${INSTALLER_INOTIFY}" ] && \
	printf "\n==========================\n install end, close the terminal \n==========================\n"

	[ -n "$DISPLAY" ] && [ -e "${INSTALLER_INOTIFY}" ] && \
	printf "$@\n" > ${INSTALLER_INOTIFY}
}

# 
##-------------------------------------
##
end_progress()
{
	# printf for new install-gui choice "install with terminal output, debug modus"
	[ -z "${INSTALLER_INOTIFY}" ] && \
	printf "\n==========================\n install abort, close the terminal \n==========================\n"

	[ -n "$DISPLAY" ] && [ -e "${INSTALLER_INOTIFY}" ] && \
	printf "end\n" > ${INSTALLER_INOTIFY}
}

##
##-------------------------------------
# Needs
# INSTALLER_INOTIFY - to communicate with the gui
# ACTION  to keep track of the step
##-------------------------------------
# This must be enhanced when we want an
# ascii/curses frontend for the installer
##-------------------------------------
##
progress()
{
	local perc
	local total
	local text

	# printf for new install-gui choice "install with terminal output, debug modus"
	[ -z "${INSTALLER_INOTIFY}" ] && \
	printf "\n==========================\n $@ \n==========================\n"

	if [ -n "$DISPLAY" ] && [ -e "${INSTALLER_INOTIFY}" ] ;then
	
		[ "${ACTION}" -lt 9 ] && ACTION=$((ACTION + 1))
		text=$(echo "$@"|cut -d ":" -f 1)
		perc=$(awk -v action=$ACTION 'BEGIN{printf ("%1.2f", action / 10)}')
		perci=$(awk -v action=$ACTION 'BEGIN{printf ("%d", action * 100 / 10)}')
		[ "$perci" -gt "100" ] && perc="1.0"

		# send message to the gui
		printf  "PERC=${perc}\n\
CURRENT=<b>$text</b>\n\
COMPLETE=completed ${ACTION} of 10" > $INSTALLER_INOTIFY
	fi
}

##
##-------------------------------------
# Needs
# OLDPERC (also changed here)
# TARGET_MNT_NAME
# ROOT_MIN_CORR
#
##-------------------------------------
# This must be enhanced when we want an
# ascii/curses frontend for the installer
##-------------------------------------
##
module_hd_progressbar()
{
	local PROGRESS
	local TOTAL
	local PERC
	local HD_MSG1

	HD_MSG1="Copying files. This can take a while. Please be patient."

	PROGRESS=$(df -m 2>/dev/null| awk 'BEGIN{m=0};/'$TARGET_MNT_NAME'/{m+=$3};END{print m}')
	TOTAL=$((ROOT_MIN_CORR + PROGRESS)) # Set starting point
	p=$1
	
	while [ -d "/proc/$p" ]; do
		PROGRESS=$(df -m 2>/dev/null | awk 'BEGIN{m=0};/'$TARGET_MNT_NAME'/{m+=$3};END{print m}')
		PERC=$((PROGRESS * 100 / TOTAL))
		if [ -z "$DISPLAY" ]; then
			[ "$PERC" -lt "100" ] && echo $PERC
		else
			if   [ "$OLDPERC" -eq "0" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "10" ] && [ "$PERC" -gt "10" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "20" ] && [ "$PERC" -gt "20" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "30" ] && [ "$PERC" -gt "30" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "40" ] && [ "$PERC" -gt "40" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "50" ] && [ "$PERC" -gt "50" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "60" ] && [ "$PERC" -gt "60" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "70" ] && [ "$PERC" -gt "70" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "80" ] && [ "$PERC" -gt "80" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "90" ] && [ "$PERC" -gt "90" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			elif [ "$OLDPERC" -lt "100" ] && [ "$PERC" -gt "100" ]; then
				OLDPERC="$PERC"
				progress "$HD_MSG1" 
			fi

		fi
		sleep 10
	done
}
##-------------------------------------
