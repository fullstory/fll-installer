##
##-------------------------------------
# Needs:
# SERVICES_START
# TARGET_MNT_POINT
#
# Calls:
# logit
# chroot_it
#
##-------------------------------------
##
system_services () {
	#
	# log my call
	#
	logit "configuring system services"

	local UPDATE_RCD
	local SERVICE_WHITELIST="hwclock.sh \
checkroot.sh \
checkfs.sh "

	local PACKAGE_WHITELIST="alsa-base \
alsa-utils \
anacron \
atd \
avahi-daemon \
capiutils \
console-common \
console-setup \
console-tools \
cron \
dbus \
fuse-utils \
gpm \
hal \
hdparm \
hotkey-setup \
ifupdown \
initscripts \
klogd \
libc6 \
module-init-tools \
netbase \
pcmciautils \
ppp \
procps \
rsyslog \
screen \
setserial \
sysklogd \
syslog-ng \
sysv-rc \
udev \
util-linux \
wpasupplicant \
x11-common"

	SERVICE_WHITELIST="${SERVICE_WHITELIST} $(dpkg -L ${PACKAGE_WHITELIST} 2>/dev/null | grep -E '^/etc/init.d/' | cut -d/ -f4)"

	#
	# extra/optional services as defined in config
	#
	if [ -n "$SERVICES_START" ]; then
		SERVICE_WHITELIST="${SERVICE_WHITELIST} ${SERVICES_START}"
	fi

	# If kelmo's python-lsbscript package is installed, use it to get the
	# whitelist script in correct order.
	if which lsb_scripts >/dev/null; then
		W_FILE=$(mktemp whitelist.XXXXXXX)
		ORDER=$(mktemp order.XXXXXX)
		for service in ${SERVICE_WHITELIST}; do
			echo "${service}" >> "${W_FILE}"
		done
		lsb_scripts -t | cut -d/ -f4 > "${ORDER}"
		SERVICE_WHITELIST=$(awk '{if (NR == FNR) w[$0] = 1; else if ($0 in w) print}' \
			"${W_FILE}" "${ORDER}")
		rm -f "${W_FILE}" "${ORDER}"
	fi


	for service in ${SERVICE_WHITELIST}; do
		[ -x "/etc/init.d/${service}" ] || continue

		case "$service" in 
			?dm)
				# already configured during live boot
				continue
				;;
		esac

		#
		# the service in is our whitelist. determine the runlevel configuration of this service
		# as preserved in the read-only chroot (DEFAULT_DIR). apply the same configuration to
		# the installed chroot. fll_analyze_runlevels(1) is the tool used to examine runlevel
		# configuration, it is provided by fll-live-initscripts.
		#
		unset UPDATE_RCD
		UPDATE_RCD=$(/usr/bin/fll_analyze_initscripts --chroot "${DEFAULT_DIR}" "${service}")
		if [ -n "${UPDATE_RCD}" ]; then
			chroot_it ${UPDATE_RCD}
		fi
	done

	# disable all services in /etc/inetd.conf
	say "disable all services in /etc/inetd.conf"
	if [ -x "${TARGET_MNT_POINT}/etc/init.d/openbsd-inetd" ]; then
		chroot_it update-inetd --multi --disable '*'
	fi

	# prepare ssh
	if [ -x "${TARGET_MNT_POINT}/etc/init.d/ssh" ]; then
		if [ ! -e "$TARGET_MNT_POINT/etc/ssh/ssh_host_rsa_key" ]; then
			ssh-keygen -q -t rsa -f "$TARGET_MNT_POINT/etc/ssh/ssh_host_rsa_key" -C '' -N ''
		fi
		if [ ! -e "$TARGET_MNT_POINT/etc/ssh/ssh_host_dsa_key" ]; then
			ssh-keygen -q -t dsa -f "$TARGET_MNT_POINT/etc/ssh/ssh_host_dsa_key" -C '' -N ''
		fi
	fi
}
