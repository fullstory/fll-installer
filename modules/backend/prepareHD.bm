##
##-------------------------------------
# Needs:
# TARGET_MNT_POINT
# HD_FORMAT
# HD_CHOICE
# HD_FSTYPE
# HD_MAP
# TMPDIR
#
# Calls:
# logit
# progress
#
# Error Codes
# 15 - could not format the root partition
# 16 - Mounting of $HD_CHOICE failed. Some messages from mount follow
# 17 - Mounting of $HD_CHOICE failed. Some messages from mount follow
#
# Return 0 on success 
# on error the error code and message are in /tmp/.installer.errors
##-------------------------------------------------------------------
##
function prepareHD()
{
	local rc
	local TMP
	local err_msg
	local error_messages
	local FS_SIZE

	#
	# log my call
	#
	logit $"prepare disk for the installation"
	#

	# sometimes kernel has not yet loaded the partition table
	# so ask him to do that
	# 
	# lines copied from fll_fstab_generator
	#
	if which udevadm >/dev/null; then
		udevadm trigger --subsystem-match=block
		udevadm settle --timeout=30
	else
		udevtrigger --subsystem-match=block
		udevsettle --timeout=30
	fi

	TMP="$(mktemp)"

	if [ $HD_FORMAT = "yes" ]; then

		progress "Formatting $HD_CHOICE..."

		umount $HD_CHOICE 2>/dev/null
		
		dd if=/dev/zero of=$HD_CHOICE bs=1k count=16 >/dev/null 2>/dev/null 

		case $HD_FSTYPE in
			xfs)
				mkfs.$HD_FSTYPE -f $HD_CHOICE 2> $TMP 1>&2
				;;
			reiser*)
				echo y | mkfs.$HD_FSTYPE  $HD_CHOICE 2> $TMP 1>&2
				;;
			jfs)
				echo y | mkfs.$HD_FSTYPE $HD_CHOICE 2> $TMP 1>&2
				;;
			*)
				mkfs.$HD_FSTYPE $HD_CHOICE 2> $TMP 1>&2
				;;
		esac
		
		rc="$?"
		if [ $rc -ne 0 ]; then
			error_messages=$(tail -8 $TMP)
			err_msg="Formatting of $HD_CHOICE failed. Some messages from mkfs.$HD_FSTYPE: $error_messages"
			logit $err_msg
			error 15 "$err_msg"
			# exit 15
		fi
		# 
 		# Deactivate dir_index-feature of ext2/ext3-partitions
		# 
		case $HD_FSTYPE in
			*ext*)
				tune2fs -O ^dir_index $HD_CHOICE &>/dev/null
				;;
		esac
	fi

	#
	# Mounting $HD_CHOICE r/w...
	#
	FS_SIZE=0
	mkdir -p $TARGET_MNT_POINT
	mount -t $HD_FSTYPE $HD_CHOICE $TARGET_MNT_POINT 2>&1> ${TMP}
	if [ $? -ne 0 ]; then
		error_messages=$(tail -8 $TMP)
		err_msg="Mounting of $HD_CHOICE failed, trying remount. Some messages from mount: $error_messages"
		logit $err_msg

		mount -o remount,dev $TARGET_MNT_POINT 2>&1> ${TMP}

		if [ $? -ne 0 ]; then
			error_messages=$(tail -8 $TMP)
			err_msg="(re)Mounting of $HD_CHOICE failed. Some messages from mount: $error_messages"
			logit $err_msg
			error 16 "$err_msg"
		fi
	fi
	FS_SIZE=$(df -m |grep "${TARGET_MNT_POINT}" |awk '{print $2}' )

	#
	# Mounting additional partitions r/w...
	#
	for i in $HD_MAP; do
		part=$(echo $i | cut -d":" -f1)
		point=$(echo $i | cut -d":" -f2)
		mkdir -p $TARGET_MNT_POINT$point

		mount $part $TARGET_MNT_POINT$point 2> /dev/null
		if [ $? -ne 0 ]; then

			error_messages=$(tail -8 $TMP)
			err_msg="Mounting of $HD_CHOICE failed, trying remount. Some messages from mount: $error_messages"
			logit $err_msg

			mount -o remount,dev $TARGET_MNT_POINT$point

			if [ $? -ne 0 ]; then
				error_messages=$(tail -8 $TMP)
				err_msg="Mounting of ${i} failed. Some messages from mount: $error_messages"
				logit $err_msg
				error 17 "$err_msg"
			fi
		fi
		((FS_SIZE=${FS_SIZE} + $(df -m |grep "${TARGET_MNT_POINT}${point}" |awk '{print $2}')))
	done

	# check that minsize is satisfied
	#
	if [ ${FS_SIZE} -le ${ROOT_MIN} ]; then
		err_msg="Not enough place to install ${FLL_DISTRO}"
		error 18 "$err_msg"
	fi
	echo "PrepareHD done" && sleep 5
	return 0	
}
##-------------------------------------

