##
##-------------------------------------
# Needs:
# TARGET_MNT_POINT
# HD_CHOICE
#
# Calls:
# logit
# progress
# translate_linux_to_grub
##-------------------------------------
##
function appendGrubForOtherOS()
{
	local TempFile
	local TempDir
	local GRUBFile
	local mounted_grub_file
	local found
	local menuList
	local drive root_partition root_device usb_dev
	local cur_r_device cur_drive cur_usb_dev
	local MSG="Appending entries for other OS to grub's menu.lst"

	#
	# log my call
	#
	logit $"appendGrubForOtherOS"
	#
	progress "$MSG"

	menuList="${TARGET_MNT_POINT}/boot/grub/menu.lst"

	TempFile="$(mktemp -p /tmp/ .XXXXXXXXXX)"
	MyGrubTemp="$(mktemp -p /tmp/ myGrub.XXXXXXXXXX)"
	TempDir=/tmp/fll-installer_tempdir
	GRUBFile="/boot/grub/menu.lst"
	mounted_grub_file="${TempDir}${GRUBFile}"
	mkdir -p $TempDir

	root_partition=$(echo ${HD_CHOICE} |cut -d"'" -f2)
	root_device=$(get_root_device $root_partition)
	drive=$(echo $root_device|cut -d / -f3)
	usb_dev=$(echo $(readlink -f /sys/block/${drive}/device) | grep  "usb")

	os-prober > $TempFile

	while IFS=: read device longName shortName kindOf; do
		# skip current root device
		if [ "$device" != "$HD_CHOICE" ]; then
			# is current device USB and not equal root_device
			# then skip it
			if [ -n "${usb_dev}" ]; then
				cur_r_device=$(get_root_device $device)
				cur_drive=$(echo $cur_r_device|cut -d / -f3)
				cur_usb_dev=$(echo $(readlink -f /sys/block/${cur_drive}/device) \
					| grep  "usb")
				if [ -n "${cur_usb_dev}" -a ! "${cur_drive}" = "${drive}" ]
				then
					continue
				fi
			fi
			if [ "$kindOf" = "linux" ]; then
				mount $device $TempDir 2>&1 >>/dev/null
				if [ $? -eq 0 ] ; then
					if [ -r "$mounted_grub_file" ]; then
						found=0
						while read line; do
							# well we take the first kernel found 
							# and dont care this is the default one or not
							#skip comented lines
							if echo $line | grep -q "^title " ; then
								if [ $found -eq 0 ] ;then
									found=1
									# one empty line
									echo >> "$MyGrubTemp"
									# and remove the word [D,d]efault it it's there
									echo $(echo $line | \
										sed -e 's#[D,d]efault##') \(${device:5}\) >> "$MyGrubTemp"
								else
									break
								fi
							else
								# skip uninteresting lines
								# remove leading spaces..
								line=$(echo "$line" | sed -e 's/^[ \t]*//' )
								if [ $found -eq 1 ] ; then
									echo $line | grep -v '^#' >> "$MyGrubTemp"								
								else
									continue
								fi
							fi
						done < "$mounted_grub_file"
					fi
					umount $TempDir
				fi
			elif [ "$kindOf" = "chain" ]; then
				if [ "$shortName" = "Windows" ]; then
					if [ ${device:8} -le 4 ]; then
						gp=$(translate_linux_to_grub $device)	
						echo "" >> "$MyGrubTemp"
						echo "title Windows 2K/XP/2003/Vista (${device:5})" >> "$MyGrubTemp"
						echo "rootnoverify $gp" >> "$MyGrubTemp"
						echo "makeactive" >> "$MyGrubTemp"
						echo "chainloader +1" >> "$MyGrubTemp"
					fi
				fi
				#     
			else
				#else
				# place for other OS's
				:
			fi
		fi
	done < "$TempFile"
	# do it
	cat $MyGrubTemp >> $menuList
	# clean up
	rm $TempFile $MyGrubTemp
	rmdir $TempDir
}
